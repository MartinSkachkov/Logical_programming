:- use_module(library(clpfd)).

% дължина(X, N) - N e дължината на списъка X.
% Условие: известно е ограничение отгоре за дължината на Х или N.
len([],0).
len([_|X],N) :- N #> 0, N #= N1 + 1, len(X,N1).

% сума(Х, N) - N e сумата от елементите на X
% Условие: известно е ограничение отгоре за дължината на X
sum([],0).
sum([A|X],N) :- N #= A + Z, sum(X,Z).

% nth(X, N, A) - N-тият елемент на X e A
% [1,2,3,4]
% Условие: известно е ограничение отгоре за дължината на X или N.
nth([A|_],N,A) :- N #= 1.
nth([_|X],N,A) :- N #> 0, N #= N1 + 1, nth(X,N1,A).

% max(A,B,C) - C е максимумът на A и B
% Условие: винаги може да го ползваме.
max(A,B,C) :- (A #>= B, C #= A) ; (B #> A, C #= B).

% Условие: A и B са известни.
max2(A,B,C) :- (A #>= B -> C #= A ; C #= B).

% ЗА ВСЯКО С ИМПЛИКАЦИЯ
forall(A,B) :- not((A, not(B))).

% eлипca(A,B,X,Y) - да се генерират в Х и У координатите на всички точки
%					с целочислени координати, които са във вътрешността на
%					елипсата с център центъра на координатната система и 
%					полуоси А по 0х и В по 0у

елипса(A,B,X,Y) :-  -A #=< X, X #=< A, Y #=< B, Y #>= -B,
    				(X^2)*(B^2) - (Y^2)*(A^2) #=< (B^2)*(A^2),
    				label([X,Y]).

% p(XX) - по даден списък XX от списъци от цели числа проверява дали всички предпоследни
% 		  елементи на елементите от ХХ, които са на четна позиция, са прости числа
% XX = [[1,2,3],[5,10,21],[3],[3,-5]]
% X e елемент на ХХ на четна позиция
% А е предпоследен елемент на Х
p(XX) :- forall( (nth(XX,N,X), N #= 2*_, concat(_,[A,_],X)), (prime(A)) ).

prime(A) :- not( (abs(B) #>= 2, abs(C) #>= 2, A #= B * C, label([B,C])) ). 

% q(XX, N) - по даден списък XX от списъци от цели числа намира в N сумата от всички предпоследни
%			 елементи на елементите на ХХ, които са на четна позиция
q(XX, N) :- findall(A, (nth(XX,K,X), K #= 2*_, concat(_,[A,_],X)), Y), sum(Y,N).

% r(XX, N) - по даден списък XX от списъци от цели числа намира в N сумата от всички предпоследни
%			 елементи на елементите на ХХ, които са на четна позиция и всички елементи са прости
r(XX,N) :- findall(A, (nth(XX,K,X), K #= 2*_, concat(_,[A,_],X), prime(A)), Y), sum(Y,N).

% A in 5..13 <=> A #>= 5, A #=< 13
% [A,B,C] ins 5..13 <=> A in 5..13, B in 5..13, C in 5..13.
% от_до(X, A, B) - X е списък, чиито елементи са числа между A и B
% Условие:  известно е ограничение отгоре за A и В
from_to([],_,_).
from_to([C|X],A,B) :- C #>= A, C#=< B, from_to(X,A,B). 

% факториел(N, F) - F = N!
% Условие: известно е N
fac(0,1).
fac(N,F) :- N #> 0, N #= N1 + 1, F #= N * F1, fac(N1,F1).

% ограничен_списък(N, X) - L е списък с дължина не повече от N,
%                          чиито елементи са естествени числа, не по-големи от N
% Условие: Известно е N
constr_list(N,X) :- K #=< N, len(X,K), X ins 0..N, label(X).

% Helpful funcs
concat([],Y,Y).
concat([A|X],Y,[A|Z]) :- concat(X,Y,Z).
